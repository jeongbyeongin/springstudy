<?xml version="1.0" encoding="UTF-8"?>

<configuration scan="true" scanPeriod="30 seconds">

	<!-- logback 로그 레벨 6단계 -->
	<!--
		1. OFF   : 로그 출력 안 함
		2. ERROR : 일반 에러
		3. WARN  : 주의 필요(잠재적 문제)
		4. INFO  : 일반 정보(프로그램이 진행되는 상황)
		5. DEBUG : 상세 정보(디버깅)
		6. TRACE : 경로 추적(DEBUG보다 세밀한 정보)
	-->

	<!-- Appenders : 로그를 출력하는 Appender를 모아 둔다. -->
	<!--
		%date{패턴} : 로그기록시간(SimpleDateFormat과 동일한 패턴 방식을 사용한다.)
		%level      : 로그레벨(FATAL, ERROR, WARN, INFO, DEBUG, TRACE), %-5level : 5자리 + 왼쪽정렬로 표시한다.
		%logger     : 로그를 찍는 클래스명
		%msg        : 로그메시지
		%n          : 줄 바꿈
	-->

	<!-- Console 화면에 로그를 찍는 console Appender -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>
				[%date{HH:mm:ss.SSS, Asia/Seoul}][%-5level][%logger] - %msg%n
			</pattern>
		</encoder>
	</appender>
	
	<!-- 매일 여러 파일에 나눠서 로그를 찍는 rolling Appender -->
	<appender name="rolling" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- root/log 디렉터리에 로그 파일(/log/2023-01-01.0.log)을 만든다. -->
			<fileNamePattern>/log/app05.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<!-- 5kb씩 로그 파일을 분할한다. -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>5kb</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!-- 로그 파일을 저장할 때 총 30일 분량의 기록을 총 3gb로 제한한다. -->
			<maxHistory>30</maxHistory>
      		<totalSizeCap>3gb</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<pattern>
				[%date{HH:mm:ss.SSS, Asia/Seoul}][%-5level][%logger][%file:%line] - %msg%n
			</pattern>
		</encoder>
	</appender>
	
	<!-- Application Loggers : com.gdu.app05 패키지는 DEBUG 수준의 로그 레벨을 가진다. -->
	<logger name="com.gdu.app05"       level="DEBUG" />

	<!-- 3rdparty Loggers : 외부 라이브러리는 INFO 수준의 로그 레벨을 가진다. -->
	<logger name="org.springframework" level="INFO" />
	<logger name="log4jdbc"            level="INFO" />
	<logger name="jdbc.sqlonly"        level="OFF" />   <!-- SQL 출력 -->
	<logger name="jdbc.sqltiming"      level="INFO" />  <!-- SQL과 SQL 실행에 걸린 시간 출력 -->
	<logger name="jdbc.resultsettable" level="INFO" />  <!-- SELECT 결과를 테이블로 출력 -->
	<logger name="jdbc.audit"          level="OFF" />   <!-- ResultSet을 제외한 모든 JDBC 호출 정보 출력 -->
	<logger name="jdbc.resultset"      level="OFF" />   <!-- ResultSet을 포함한 모든 JDBC 호출 정보 출력 -->
	<logger name="jdbc.connection"     level="OFF" />   <!-- Connection 연결/종료 정보 출력 -->

	<!-- Root Logger -->
	<root>
		<appender-ref ref="console" />
		<appender-ref ref="rolling" />
	</root>
	
</configuration>